<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="shares_8hpp" kind="file" language="C++">
    <compoundname>shares.hpp</compoundname>
    <includedby refid="core_8hpp" local="yes">include/core.hpp</includedby>
    <invincdepgraph>
      <node id="75">
        <label>include/shares.hpp</label>
        <link refid="shares_8hpp"/>
        <childnode refid="76" relation="include">
        </childnode>
      </node>
      <node id="76">
        <label>include/core.hpp</label>
        <link refid="core_8hpp_source"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structpower" prot="public">power</innerclass>
    <innerclass refid="structpower2" prot="public">power2</innerclass>
    <innerclass refid="structpower3" prot="public">power3</innerclass>
    <innerclass refid="structpstats" prot="public">pstats</innerclass>
    <innerclass refid="structplog" prot="public">plog</innerclass>
    <innerclass refid="structdlog" prot="public">dlog</innerclass>
    <innerclass refid="structdelegations" prot="public">delegations</innerclass>
    <innerclass refid="structvesting" prot="public">vesting</innerclass>
    <innerclass refid="structcpartners2" prot="public">cpartners2</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="shares_8hpp_1aaaef6bde2f11b5fa0ae82915daacdd6d" prot="public" static="no">
        <type>eosio::multi_index&lt;&quot;power&quot;_n, <ref refid="structpower" kindref="compound">power</ref> &gt;</type>
        <definition>typedef eosio::multi_index&lt;&quot;power&quot;_n, power&gt; power_index</definition>
        <argsstring></argsstring>
        <name>power_index</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shares.hpp" line="17" column="1" bodyfile="include/shares.hpp" bodystart="17" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="shares_8hpp_1a5523322504441c71b35b1a9ef999ea9c" prot="public" static="no">
        <type>eosio::multi_index&lt;&quot;power2&quot;_n, <ref refid="structpower2" kindref="compound">power2</ref> &gt;</type>
        <definition>typedef eosio::multi_index&lt;&quot;power2&quot;_n, power2&gt; power2_index</definition>
        <argsstring></argsstring>
        <name>power2_index</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shares.hpp" line="31" column="1" bodyfile="include/shares.hpp" bodystart="31" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="shares_8hpp_1aca70dec90f5c5e894e0b36969fc0ce81" prot="public" static="no">
        <type>eosio::multi_index&lt;&quot;power3&quot;_n, <ref refid="structpower3" kindref="compound">power3</ref>, eosio::indexed_by&lt;&quot;bypower&quot;_n, eosio::const_mem_fun&lt; <ref refid="structpower3" kindref="compound">power3</ref>, uint64_t, &amp;power3::bypower &gt; &gt;, eosio::indexed_by&lt;&quot;bystaked&quot;_n, eosio::const_mem_fun&lt; <ref refid="structpower3" kindref="compound">power3</ref>, uint64_t, &amp;power3::bystaked &gt; &gt;, eosio::indexed_by&lt;&quot;bydelegated&quot;_n, eosio::const_mem_fun&lt; <ref refid="structpower3" kindref="compound">power3</ref>, uint64_t, &amp;power3::bydelegated &gt; &gt;, eosio::indexed_by&lt;&quot;bywbadges&quot;_n, eosio::const_mem_fun&lt; <ref refid="structpower3" kindref="compound">power3</ref>, uint64_t, &amp;power3::bywbadges &gt; &gt;, eosio::indexed_by&lt;&quot;byfrozen&quot;_n, eosio::const_mem_fun&lt; <ref refid="structpower3" kindref="compound">power3</ref>, uint64_t, &amp;power3::byfrozen &gt; &gt; &gt;</type>
        <definition>typedef eosio::multi_index&lt;&quot;power3&quot;_n, power3, eosio::indexed_by&lt;&quot;bypower&quot;_n, eosio::const_mem_fun&lt;power3, uint64_t, &amp;power3::bypower&gt; &gt;, eosio::indexed_by&lt;&quot;bystaked&quot;_n, eosio::const_mem_fun&lt;power3, uint64_t, &amp;power3::bystaked&gt; &gt;, eosio::indexed_by&lt;&quot;bydelegated&quot;_n, eosio::const_mem_fun&lt;power3, uint64_t, &amp;power3::bydelegated&gt; &gt;, eosio::indexed_by&lt;&quot;bywbadges&quot;_n, eosio::const_mem_fun&lt;power3, uint64_t, &amp;power3::bywbadges&gt; &gt;, eosio::indexed_by&lt;&quot;byfrozen&quot;_n, eosio::const_mem_fun&lt;power3, uint64_t, &amp;power3::byfrozen&gt; &gt; &gt; power3_index</definition>
        <argsstring></argsstring>
        <name>power3_index</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shares.hpp" line="65" column="1" bodyfile="include/shares.hpp" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="shares_8hpp_1afe84593b1a062c7ad24255788041d788" prot="public" static="no">
        <type>eosio::multi_index&lt;&quot;pstats&quot;_n, <ref refid="structpstats" kindref="compound">pstats</ref> &gt;</type>
        <definition>typedef eosio::multi_index&lt;&quot;pstats&quot;_n, pstats&gt; pstats_index</definition>
        <argsstring></argsstring>
        <name>pstats_index</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shares.hpp" line="89" column="1" bodyfile="include/shares.hpp" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="shares_8hpp_1a4f35db41db8282152d41fd713f19403f" prot="public" static="no">
        <type>eosio::multi_index&lt;&quot;plog&quot;_n, <ref refid="structplog" kindref="compound">plog</ref>, eosio::indexed_by&lt;&quot;hostpoolid&quot;_n, eosio::const_mem_fun&lt; <ref refid="structplog" kindref="compound">plog</ref>, uint128_t, &amp;plog::hostpoolid &gt; &gt; &gt;</type>
        <definition>typedef eosio::multi_index&lt;&quot;plog&quot;_n, plog, eosio::indexed_by&lt;&quot;hostpoolid&quot;_n, eosio::const_mem_fun&lt;plog, uint128_t, &amp;plog::hostpoolid&gt; &gt; &gt; plog_index</definition>
        <argsstring></argsstring>
        <name>plog_index</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shares.hpp" line="114" column="1" bodyfile="include/shares.hpp" bodystart="114" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="shares_8hpp_1afe6ec88ede41c20058060ab3c92fab70" prot="public" static="no">
        <type>eosio::multi_index&lt;&quot;dlog&quot;_n, <ref refid="structdlog" kindref="compound">dlog</ref> &gt;</type>
        <definition>typedef eosio::multi_index&lt;&quot;dlog&quot;_n, dlog&gt; dlog_index</definition>
        <argsstring></argsstring>
        <name>dlog_index</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shares.hpp" line="134" column="1" bodyfile="include/shares.hpp" bodystart="134" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="shares_8hpp_1a14934b84afee0a898e068a776b0549a6" prot="public" static="no">
        <type>eosio::multi_index&lt;&quot;delegations&quot;_n, <ref refid="structdelegations" kindref="compound">delegations</ref> &gt;</type>
        <definition>typedef eosio::multi_index&lt;&quot;delegations&quot;_n, delegations&gt; delegation_index</definition>
        <argsstring></argsstring>
        <name>delegation_index</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shares.hpp" line="149" column="1" bodyfile="include/shares.hpp" bodystart="149" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="shares_8hpp_1a7399ea65b32ede9a71b1bdcf0507fd7e" prot="public" static="no">
        <type>eosio::multi_index&lt;&quot;vesting&quot;_n, <ref refid="structvesting" kindref="compound">vesting</ref> &gt;</type>
        <definition>typedef eosio::multi_index&lt;&quot;vesting&quot;_n, vesting&gt; vesting_index</definition>
        <argsstring></argsstring>
        <name>vesting_index</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shares.hpp" line="173" column="1" bodyfile="include/shares.hpp" bodystart="173" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="shares_8hpp_1a4f71b49bfc03657982b5844ae971ae2b" prot="public" static="no">
        <type>eosio::multi_index&lt;&quot;cpartners2&quot;_n, <ref refid="structcpartners2" kindref="compound">cpartners2</ref> &gt;</type>
        <definition>typedef eosio::multi_index&lt;&quot;cpartners2&quot;_n, cpartners2&gt; cpartners2_index</definition>
        <argsstring></argsstring>
        <name>cpartners2_index</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/shares.hpp" line="189" column="1" bodyfile="include/shares.hpp" bodystart="189" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="6" refid="structpower" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">[[eosio::table,<sp/><ref refid="namespaceeosio" kindref="compound">eosio</ref>::contract(&quot;unicore&quot;)]]<sp/><ref refid="structpower" kindref="compound">power</ref><sp/>{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eosio::name<sp/>host;</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/><ref refid="structpower" kindref="compound">power</ref>;</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>staked;</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>delegated;</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>with_badges;</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>primary_key()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>host.value;}</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EOSLIB_SERIALIZE(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structpower" kindref="compound">power</ref>,<sp/>(host)(<ref refid="structpower" kindref="compound">power</ref>)(staked)(delegated)(with_badges))</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>eosio::multi_index&lt;</highlight><highlight class="stringliteral">&quot;power&quot;</highlight><highlight class="normal">_n,<sp/><ref refid="structpower" kindref="compound">power</ref>&gt;<sp/>power_index;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="23" refid="structpower2" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">[[eosio::table,<sp/><ref refid="namespaceeosio" kindref="compound">eosio</ref>::contract(&quot;unicore&quot;)]]<sp/><ref refid="structpower2" kindref="compound">power2</ref><sp/>{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>eosio::name<sp/>host;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>frozen;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>primary_key()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>host.value;}</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>EOSLIB_SERIALIZE(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structpower2" kindref="compound">power2</ref>,<sp/>(host)(frozen))</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>eosio::multi_index&lt;</highlight><highlight class="stringliteral">&quot;power2&quot;</highlight><highlight class="normal">_n,<sp/><ref refid="structpower2" kindref="compound">power2</ref>&gt;<sp/>power2_index;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="40" refid="structpower3" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">[[eosio::table,<sp/><ref refid="namespaceeosio" kindref="compound">eosio</ref>::contract(&quot;unicore&quot;)]]<sp/><ref refid="structpower3" kindref="compound">power3</ref><sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>eosio::name<sp/>username;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/><ref refid="structpower" kindref="compound">power</ref>;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>staked;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>delegated;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>with_badges;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>frozen;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>primary_key()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>username.value;}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>bypower()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structpower" kindref="compound">power</ref>;}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>bystaked()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>staked;}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>bydelegated()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>delegated;}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>bywbadges()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>with_badges;}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>byfrozen()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>frozen;}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>EOSLIB_SERIALIZE(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structpower3" kindref="compound">power3</ref>,<sp/>(username)(<ref refid="structpower" kindref="compound">power</ref>)(staked)(delegated)(with_badges)(frozen))</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>eosio::multi_index&lt;</highlight><highlight class="stringliteral">&quot;power3&quot;</highlight><highlight class="normal">_n,<sp/><ref refid="structpower3" kindref="compound">power3</ref>,</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>eosio::indexed_by&lt;</highlight><highlight class="stringliteral">&quot;bypower&quot;</highlight><highlight class="normal">_n,<sp/>eosio::const_mem_fun&lt;power3,<sp/>uint64_t,<sp/>&amp;power3::bypower&gt;&gt;,</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>eosio::indexed_by&lt;</highlight><highlight class="stringliteral">&quot;bystaked&quot;</highlight><highlight class="normal">_n,<sp/>eosio::const_mem_fun&lt;power3,<sp/>uint64_t,<sp/>&amp;power3::bystaked&gt;&gt;,</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>eosio::indexed_by&lt;</highlight><highlight class="stringliteral">&quot;bydelegated&quot;</highlight><highlight class="normal">_n,<sp/>eosio::const_mem_fun&lt;power3,<sp/>uint64_t,<sp/>&amp;power3::bydelegated&gt;&gt;,</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>eosio::indexed_by&lt;</highlight><highlight class="stringliteral">&quot;bywbadges&quot;</highlight><highlight class="normal">_n,<sp/>eosio::const_mem_fun&lt;power3,<sp/>uint64_t,<sp/>&amp;power3::bywbadges&gt;&gt;,</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>eosio::indexed_by&lt;</highlight><highlight class="stringliteral">&quot;byfrozen&quot;</highlight><highlight class="normal">_n,<sp/>eosio::const_mem_fun&lt;power3,<sp/>uint64_t,<sp/>&amp;power3::byfrozen&gt;&gt;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/>&gt;<sp/>power3_index;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="73" refid="structpstats" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">[[eosio::table,<sp/><ref refid="namespaceeosio" kindref="compound">eosio</ref>::contract(&quot;unicore&quot;)]]<sp/><ref refid="structpstats" kindref="compound">pstats</ref><sp/>{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>eosio::name<sp/>host;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>eosio::asset<sp/>total_available_in_asset;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>pflow_last_withdrawed_pool_id;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>uint128_t<sp/>pflow_available_segments;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>eosio::asset<sp/>pflow_available_in_asset;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>eosio::asset<sp/>pflow_withdrawed;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>eosio::asset<sp/>ref_available_in_asset;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>ref_available_segments<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>eosio::asset<sp/>ref_withdrawed;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>primary_key()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>host.value;}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>EOSLIB_SERIALIZE(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structpstats" kindref="compound">pstats</ref>,<sp/>(host)(total_available_in_asset)(pflow_last_withdrawed_pool_id)(pflow_available_segments)(pflow_available_in_asset)(pflow_withdrawed)(ref_available_in_asset)(ref_available_segments)(ref_withdrawed))</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>eosio::multi_index&lt;</highlight><highlight class="stringliteral">&quot;pstats&quot;</highlight><highlight class="normal">_n,<sp/><ref refid="structpstats" kindref="compound">pstats</ref>&gt;<sp/>pstats_index;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="96" refid="structplog" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">[[eosio::table,<sp/><ref refid="namespaceeosio" kindref="compound">eosio</ref>::contract(&quot;unicore&quot;)]]<sp/><ref refid="structplog" kindref="compound">plog</ref><sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>id;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>eosio::name<sp/>host;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>pool_id;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>cycle_num;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>pool_num;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/><ref refid="structpower" kindref="compound">power</ref>;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>primary_key()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>id;}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>uint128_t<sp/>hostpoolid()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>combine_ids(host.value,<sp/>pool_id);<sp/>}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>EOSLIB_SERIALIZE(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structplog" kindref="compound">plog</ref>,<sp/>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)(host)(pool_id)(cycle_num)(pool_num)(<ref refid="structpower" kindref="compound">power</ref>))</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>eosio::multi_index&lt;</highlight><highlight class="stringliteral">&quot;plog&quot;</highlight><highlight class="normal">_n,<sp/><ref refid="structplog" kindref="compound">plog</ref>,</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>eosio::indexed_by&lt;</highlight><highlight class="stringliteral">&quot;hostpoolid&quot;</highlight><highlight class="normal">_n,<sp/>eosio::const_mem_fun&lt;plog,<sp/>uint128_t,<sp/>&amp;plog::hostpoolid&gt;&gt;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/>&gt;<sp/>plog_index;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="121" refid="structdlog" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">[[eosio::table,<sp/><ref refid="namespaceeosio" kindref="compound">eosio</ref>::contract(&quot;unicore&quot;)]]<sp/><ref refid="structdlog" kindref="compound">dlog</ref><sp/>{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>id;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>eosio::name<sp/>host;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>pool_id;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>uint128_t<sp/>segments;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>eosio::asset<sp/>amount;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>primary_key()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>id;}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>EOSLIB_SERIALIZE(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdlog" kindref="compound">dlog</ref>,<sp/>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)(host)(pool_id)(segments)(amount))</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>eosio::multi_index&lt;</highlight><highlight class="stringliteral">&quot;dlog&quot;</highlight><highlight class="normal">_n,<sp/><ref refid="structdlog" kindref="compound">dlog</ref>&gt;<sp/>dlog_index;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="140" refid="structdelegations" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">[[eosio::table,<sp/><ref refid="namespaceeosio" kindref="compound">eosio</ref>::contract(&quot;unicore&quot;)]]<sp/><ref refid="structdelegations" kindref="compound">delegations</ref><sp/>{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eosio::name<sp/>reciever;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>shares;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>primary_key()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>reciever.value;}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EOSLIB_SERIALIZE(<ref refid="structdelegations" kindref="compound">delegations</ref>,<sp/>(reciever)(shares))</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>eosio::multi_index&lt;</highlight><highlight class="stringliteral">&quot;delegations&quot;</highlight><highlight class="normal">_n,<sp/><ref refid="structdelegations" kindref="compound">delegations</ref>&gt;<sp/>delegation_index;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="156" refid="structvesting" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">[[eosio::table,<sp/><ref refid="namespaceeosio" kindref="compound">eosio</ref>::contract(&quot;unicore&quot;)]]<sp/><ref refid="structvesting" kindref="compound">vesting</ref><sp/>{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>id;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>eosio::name<sp/>host;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>eosio::name<sp/>owner;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>eosio::name<sp/>contract;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>eosio::name<sp/>type;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>eosio::time_point_sec<sp/>startat;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>duration;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>eosio::asset<sp/>amount;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>eosio::asset<sp/>available;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>eosio::asset<sp/>withdrawed;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>primary_key()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>id;}</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>EOSLIB_SERIALIZE(<ref refid="structvesting" kindref="compound">vesting</ref>,<sp/>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)(host)(owner)(contract)(type)(startat)(duration)(amount)(available)(withdrawed))</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>eosio::multi_index&lt;</highlight><highlight class="stringliteral">&quot;vesting&quot;</highlight><highlight class="normal">_n,<sp/><ref refid="structvesting" kindref="compound">vesting</ref>&gt;<sp/>vesting_index;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="179" refid="structcpartners2" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/><sp/></highlight><highlight class="normal">[[eosio::table,<sp/><ref refid="namespaceeosio" kindref="compound">eosio</ref>::contract(&quot;unicore&quot;)]]<sp/><ref refid="structcpartners2" kindref="compound">cpartners2</ref><sp/>{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eosio::name<sp/>partner;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eosio::name<sp/>status;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eosio::time_point_sec<sp/>join_at;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eosio::time_point_sec<sp/>expiration;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>primary_key()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>partner.value;}</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EOSLIB_SERIALIZE(<ref refid="structcpartners2" kindref="compound">cpartners2</ref>,<sp/>(partner)(status)(join_at)(expiration))</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>eosio::multi_index&lt;</highlight><highlight class="stringliteral">&quot;cpartners2&quot;</highlight><highlight class="normal">_n,<sp/><ref refid="structcpartners2" kindref="compound">cpartners2</ref>&gt;<sp/>cpartners2_index;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="include/shares.hpp"/>
  </compounddef>
</doxygen>
